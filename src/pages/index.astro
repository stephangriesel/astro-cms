---
// Component Imports
import Head from "../components/Head.astro";
import Hero from "../components/Hero.astro";
// import { ViewTransitions } from 'astro:transitions';

import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";
import { SITE } from "../config";
import HomeIntro from "../components/HomeIntro.astro";
let { title } = SITE;
let description = "Custom-made designs made simple";
let permalink = "https://www.vistapeople.net/";

let allNavBar = await Astro.glob("./content/navigationbar/*.md");
allNavBar = allNavBar.sort(
  (a, b) =>
    new Date(b.frontmatter.publishDate).valueOf() -
    new Date(a.frontmatter.publishDate).valueOf()
);
let allHomeIntro = await Astro.glob("./content/homeintro/*.md");
allHomeIntro = allHomeIntro.sort(
  (a, b) =>
    new Date(b.frontmatter.publishDate).valueOf() -
    new Date(a.frontmatter.publishDate).valueOf()
);
---

<html lang="en">
  <head>
    <Head {title} {description} {permalink} />
    <!-- <ViewTransitions fallback="animate" /> -->
  </head>
  <body>
    <div class="ml-[auto] mr-[auto] w-full max-w-[65em] pl-[2rem] pr-[2rem]">
      {allNavBar.map((p) => <Nav post={p} />)}
    </div>
    <Hero />
    <div class="ml-[auto] mr-[auto] w-full max-w-[65em] pl-[2rem] pr-[2rem]">
      <main>
        <section class="bg-white dark:bg-gray-900">
          <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16">
            <HomeIntro post={allHomeIntro[0]} />
            <div
              class="flex flex-col space-y-4 sm:flex-row sm:justify-center sm:space-y-0 sm:space-x-4 animation"
            >
              <a
                href="/rsvp"
                class="inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-white rounded-lg bg-slate-700 hover:bg-slate-800 focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-900"
              >
                RSVP
                <svg
                  class="w-3.5 h-3.5 ml-2"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 14 10"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M1 5h12m0 0L9 1m4 4L9 9"></path>
                </svg>
              </a>
              <a
                href="/accommodation"
                class="inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-gray-900 rounded-lg border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
              >
                Accommodation
              </a>
              <a
                href="/faq"
                class="inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-gray-900 rounded-lg border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
              >
                FAQ's
              </a>
            </div>
          </div>
        </section>
      </main>
    </div>
    <section class="w-full h-2/4">
      <img
        src="https://placehold.co/600x400?text=Footer+Image"
        class="object-cover w-full h-96 md:h-[40rem] animation"
        alt="Wood Work"
      />
    </section>
    <Footer />
    <style>
      .animation {
        opacity: 0;
        transition: all 0.7s ease-out;
        transition-delay: 0.4s;
      }

      .scroll-animation {
        opacity: 1;
        transform: translateX(0);
      }
    </style>
    <script>
      const the_animation = document.querySelectorAll(".animation");

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Check for "seen" class and element visibility
              if (
                !entry.target.classList.contains("seen") &&
                entry.target.offsetParent !== null
              ) {
                entry.target.classList.add("scroll-animation");
                entry.target.classList.add("seen");

                // Unobserve element after animation (optional)
                observer.unobserve(entry.target);
              }
            }
          });
        },
        { threshold: 0.1 }
      );

      for (let i = 0; i < the_animation.length; i++) {
        const elements = the_animation[i];
        observer.observe(elements);
      }
    </script>
  </body>
</html>
