---
export interface Props {
  post: any;
}

const { post } = Astro.props;
---

<li class="mb-10 ml-4">
  <div
    class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -left-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"
  >
  </div>
  <div class="flex justify-center">
    <div
      class="flex items-center content-center align-center text-gray-500 dark:text-gray-400 font-bold text-2xl justify-center w-72 h-14 bg-[#ebccca] rounded-md mb-5 mt-5 animation"
    >
      {post.frontmatter.title}
    </div>
  </div>
  <p
    class="mb-4 text-base font-normal text-xl text-gray-500 dark:text-gray-400 animation"
  >
    {post.frontmatter.description}
  </p>
</li>

<style>
  .animation {
    opacity: 0;
    transition: all 0.7s ease-out;
    transition-delay: 0.4s;
  }

  .scroll-animation {
    opacity: 1;
    transform: translateX(0);
  }
</style>
<script>
  const the_animation = document.querySelectorAll(".animation");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Check for "seen" class and element visibility
          if (
            !entry.target.classList.contains("seen") &&
            (entry.target as HTMLElement).offsetParent !== null
          ) {
            entry.target.classList.add("scroll-animation");
            entry.target.classList.add("seen");

            // Unobserve element after animation (optional)
            observer.unobserve(entry.target);
          }
        }
      });
    },
    { threshold: 0.1 }
  );

  for (let i = 0; i < the_animation.length; i++) {
    const elements = the_animation[i];
    observer.observe(elements);
  }
</script>
